name: Build, Push and Deploy a Docker Image

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:
  build-push-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3.3.0
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push Docker image
      id: push
      uses: docker/build-push-action@v6.5.0
      with:
        context: .
        push: true
        tags: ghcr.io/${{ github.repository }}:latest
    
    - name: Update app spec with GitHub Container Registry image
      run: |
        echo "Before replacement:"
        cat .do/app.yaml | grep -A 10 "image:"
        
        # Convert repository name to lowercase (GHCR requirement)
        REPO_LOWERCASE=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
        echo "Using image: ghcr.io/$REPO_LOWERCASE:latest"
        
        # Update image repository for GitHub Container Registry
        sed -i 's|PLACEHOLDER_IMAGE_NAME|ghcr.io/'$REPO_LOWERCASE'|g' .do/app.yaml
        sed -i 's|PLACEHOLDER_REGISTRY_TYPE|DOCKER_HUB|g' .do/app.yaml
        sed -i 's|PLACEHOLDER_REGISTRY|ghcr.io|g' .do/app.yaml
        
        echo "After replacement:"
        cat .do/app.yaml | grep -A 10 "image:"
        
        # Verify the replacement worked
        if grep -q "PLACEHOLDER_" .do/app.yaml; then
          echo "‚ùå ERROR: Some placeholders were not replaced!"
          cat .do/app.yaml | grep "PLACEHOLDER_"
          exit 1
        else
          echo "‚úÖ All placeholders successfully replaced"
        fi
    
    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
    
    - name: Deploy to DigitalOcean App Platform
      run: |
        echo "Deploying with image: ghcr.io/$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]'):latest"
        echo "Final app.yaml image configuration:"
        cat .do/app.yaml | grep -A 10 "image:"
        
        APP_ID=$(doctl apps list --format ID,Spec.Name --no-header | grep "${{ secrets.DO_APP_NAME }}" | cut -f1)
        
        if [ -z "$APP_ID" ]; then
          echo "Creating new app: ${{ secrets.DO_APP_NAME }}"
          doctl apps create --spec .do/app.yaml
        else
          echo "Updating existing app: ${{ secrets.DO_APP_NAME }} (ID: $APP_ID)"
          doctl apps update $APP_ID --spec .do/app.yaml
        fi
    
    - name: Wait for deployment
      run: |
        echo "Waiting for deployment of ${{ secrets.DO_APP_NAME }} to complete..."
        APP_ID=$(doctl apps list --format ID,Spec.Name --no-header | grep "${{ secrets.DO_APP_NAME }}" | cut -f1)
        
        for i in {1..30}; do
          STATUS=$(doctl apps get $APP_ID --format Phase --no-header)
          echo "Deployment status: $STATUS"
          
          if [ "$STATUS" = "ACTIVE" ]; then
            echo "‚úÖ Deployment successful!"
            break
          elif [ "$STATUS" = "ERROR" ]; then
            echo "‚ùå Deployment failed!"
            exit 1
          fi
          
          sleep 20
        done
    
    - name: Get App URL
      run: |
        APP_ID=$(doctl apps list --format ID,Spec.Name --no-header | grep "${{ secrets.DO_APP_NAME }}" | cut -f1)
        APP_URL=$(doctl apps get $APP_ID --format LiveURL --no-header)
        echo "üöÄ Application deployed at: $APP_URL"
