name: Deploy Docker Image from Docker Hub

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Verify Docker Hub image exists
      run: |
        echo "Verifying Docker Hub image: ${{ secrets.DOCKER_IMAGE_NAME }}:latest"
        docker pull ${{ secrets.DOCKER_IMAGE_NAME }}:latest
        echo "‚úÖ Image verified and accessible from Docker Hub"
    
    - name: Update app spec with Docker Hub image
      run: |
        echo "Before replacement:"
        cat .do/app.yaml | grep -A 10 "image:"
        
        echo "Using Docker Hub image: ${{ secrets.DOCKER_IMAGE_NAME }}:latest"
        
        # Update image repository for Docker Hub (no credentials needed for public repo)
        sed -i 's|PLACEHOLDER_IMAGE_NAME|${{ secrets.DOCKER_IMAGE_NAME }}|g' .do/app.yaml
        sed -i 's|PLACEHOLDER_REGISTRY_TYPE|DOCKER_HUB|g' .do/app.yaml
        sed -i 's|PLACEHOLDER_REGISTRY|docker.io|g' .do/app.yaml
        sed -i 's|PLACEHOLDER_MONGODB_URI|${{ secrets.SPRING_DATA_MONGODB_URI }}|g' .do/app.yaml
        sed -i 's|PLACEHOLDER_ABHA_CLIENT_ID|${{ secrets.ABHA_CLIENT_ID }}|g' .do/app.yaml
        sed -i 's|PLACEHOLDER_ABHA_CLIENT_SECRET|${{ secrets.ABHA_CLIENT_SECRET }}|g' .do/app.yaml
        sed -i 's|PLACEHOLDER_ABHA_X_HIP_ID|${{ secrets.ABHA_X_HIP_ID }}|g' .do/app.yaml
        sed -i 's|PLACEHOLDER_ABHA_AUTH_TOKEN|${{ secrets.ABHA_AUTH_TOKEN }}|g' .do/app.yaml
        sed -i 's|PLACEHOLDER_SPRING_USER_NAME|${{ secrets.SPRING_SECURITY_USER_NAME }}|g' .do/app.yaml
        sed -i 's|PLACEHOLDER_SPRING_USER_PASSWORD|${{ secrets.SPRING_SECURITY_USER_PASSWORD }}|g' .do/app.yaml
        sed -i 's|PLACEHOLDER_DOCKERHUB_PASSWORD|${{ secrets.DOCKER_PASSWORD }}|g' .do/app.yaml
        
        echo "After replacement:"
        cat .do/app.yaml | grep -A 10 "image:"
        
        # Verify the replacement worked
        if grep -q "PLACEHOLDER_" .do/app.yaml; then
          echo "‚ùå ERROR: Some placeholders were not replaced!"
          cat .do/app.yaml | grep "PLACEHOLDER_"
          exit 1
        else
          echo "‚úÖ All placeholders successfully replaced"
        fi
    
    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
    
    - name: Deploy to DigitalOcean App Platform
      run: |
        echo "Deploying with Docker Hub image: ${{ secrets.DOCKER_IMAGE_NAME }}:latest"
        echo "Final app.yaml image configuration:"
        cat .do/app.yaml | grep -A 10 "image:"
        
        APP_ID=$(doctl apps list --format ID,Spec.Name --no-header | grep "${{ secrets.DO_APP_NAME }}" | cut -f1)
        
        if [ -z "$APP_ID" ]; then
          echo "Creating new app: ${{ secrets.DO_APP_NAME }}"
          doctl apps create --spec .do/app.yaml
        else
          echo "Updating existing app: ${{ secrets.DO_APP_NAME }} (ID: $APP_ID)"
          doctl apps update $APP_ID --spec .do/app.yaml
        fi
    - name: List DigitalOcean Apps
      run: |
        echo "Listing DigitalOcean apps..."
        doctl apps list --format ID,Spec.Name --no-header
        echo "Apps listed above."
    - name: Wait for deployment
      run: |
        echo "Waiting for deployment of ${{ secrets.DO_APP_NAME }} to complete..."
        APP_ID=$(doctl apps list --format ID,Spec.Name --no-header | grep "${{ secrets.DO_APP_NAME }}" | cut -f1)
        
        for i in {1..30}; do
          STATUS=$(doctl apps get $APP_ID --format Phase --no-header)
          echo "Deployment status: $STATUS"
          
          if [ "$STATUS" = "ACTIVE" ]; then
            echo "‚úÖ Deployment successful!"
            break
          elif [ "$STATUS" = "ERROR" ]; then
            echo "‚ùå Deployment failed!"
            exit 1
          fi
          
          sleep 20
        done
    
    - name: Get App URL
      run: |
        APP_ID=$(doctl apps list --format ID,Spec.Name --no-header | grep "${{ secrets.DO_APP_NAME }}" | cut -f1)
        APP_URL=$(doctl apps get $APP_ID --format LiveURL --no-header)
        echo "üöÄ Application deployed at: $APP_URL"
