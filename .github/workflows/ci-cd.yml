name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: docker.io

jobs:
  # test:
  #   name: Run Tests
  #   runs-on: ubuntu-latest
    
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4
    
  #   - name: Set up JDK 17
  #     uses: actions/setup-java@v3
  #     with:
  #       java-version: '17'
  #       distribution: 'temurin'
    
  #   - name: Cache Maven packages
  #     uses: actions/cache@v3
  #     with:
  #       path: ~/.m2
  #       key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
  #       restore-keys: ${{ runner.os }}-m2
    
  #   - name: Run tests
  #     run: mvn clean test
    
  #   - name: Publish test results
  #     uses: dorny/test-reporter@v1
  #     if: success() || failure()
  #     with:
  #       name: Maven Tests
  #       path: target/surefire-reports/*.xml
  #       reporter: java-junit

  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    # needs: test  # Commented out since test job is commented
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ secrets.DOCKER_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'
    
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ secrets.DOCKER_IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  deploy:
    name: Deploy to DigitalOcean
    runs-on: ubuntu-latest
    # needs: [build, security]  # build doesn't depend on test anymore
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
    
    - name: Update app spec with secrets
      run: |
        # Replace GitHub repository placeholder
        sed -i 's|Suvrat1629/MedBridgeBackend|${{ github.repository }}|g' .do/app.yaml
        
        # Replace Docker image repository placeholder  
        sed -i 's|repository: suvrat1629/namaste-web|repository: ${{ secrets.DOCKER_IMAGE_NAME }}|g' .do/app.yaml
        
        
        # Replace Docker image repository placeholder  
        
        
        # Replace all environment variable placeholders
        sed -i 's|PLACEHOLDER_MONGODB_URI|${{ secrets.SPRING_DATA_MONGODB_URI }}|g' .do/app.yaml
        sed -i 's|PLACEHOLDER_ABHA_CLIENT_ID|${{ secrets.ABHA_CLIENT_ID }}|g' .do/app.yaml
        sed -i 's|PLACEHOLDER_ABHA_CLIENT_SECRET|${{ secrets.ABHA_CLIENT_SECRET }}|g' .do/app.yaml
        sed -i 's|PLACEHOLDER_ABHA_X_HIP_ID|${{ secrets.ABHA_X_HIP_ID }}|g' .do/app.yaml
        sed -i 's|PLACEHOLDER_ABHA_AUTH_TOKEN|${{ secrets.ABHA_AUTH_TOKEN }}|g' .do/app.yaml
        sed -i 's|PLACEHOLDER_SPRING_USER_NAME|${{ secrets.SPRING_SECURITY_USER_NAME }}|g' .do/app.yaml
        sed -i 's|PLACEHOLDER_SPRING_USER_PASSWORD|${{ secrets.SPRING_SECURITY_USER_PASSWORD }}|g' .do/app.yaml
        
        # Debug: Show the updated app.yaml
        echo "=== Updated app.yaml ==="
        cat .do/app.yaml
    
    - name: Deploy to DigitalOcean App Platform
      run: |
        APP_ID=$(doctl apps list --format ID,Spec.Name --no-header | grep "${{ secrets.DO_APP_NAME }}" | cut -f1)
        
        if [ -z "$APP_ID" ]; then
          echo "Creating new app: ${{ secrets.DO_APP_NAME }}"
          doctl apps create --spec .do/app.yaml
        else
          echo "Updating existing app: ${{ secrets.DO_APP_NAME }} (ID: $APP_ID)"
          doctl apps update $APP_ID --spec .do/app.yaml
        fi
    
    - name: Wait for deployment
      run: |
        echo "Waiting for deployment of ${{ secrets.DO_APP_NAME }} to complete..."
        APP_ID=$(doctl apps list --format ID,Spec.Name --no-header | grep "${{ secrets.DO_APP_NAME }}" | cut -f1)
        
        for i in {1..30}; do
          STATUS=$(doctl apps get $APP_ID --format Phase --no-header)
          echo "Deployment status: $STATUS"
          
          if [ "$STATUS" = "ACTIVE" ]; then
            echo "‚úÖ Deployment successful!"
            break
          elif [ "$STATUS" = "ERROR" ]; then
            echo "‚ùå Deployment failed!"
            exit 1
          fi
          
          sleep 20
        done
    
    - name: Get App URL
      run: |
        APP_ID=$(doctl apps list --format ID,Spec.Name --no-header | grep "${{ secrets.DO_APP_NAME }}" | cut -f1)
        APP_URL=$(doctl apps get $APP_ID --format LiveURL --no-header)
        echo "üöÄ Application deployed at: $APP_URL"
