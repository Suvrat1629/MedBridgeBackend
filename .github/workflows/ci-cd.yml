name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: docker.io

jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ secrets.DOCKER_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    name: Deploy to DigitalOcean
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
    
    - name: Update app spec with new image and credentials
      run: |
        # Create base64 encoded credentials for DigitalOcean
        DOCKER_CREDS=$(echo -n "${{ secrets.DOCKER_USERNAME }}:${{ secrets.DOCKER_PASSWORD }}" | base64 -w 0)
        
        # Update image repository and credentials
        sed -i 's|PLACEHOLDER_IMAGE_NAME|${{ secrets.DOCKER_IMAGE_NAME }}|g' .do/app.yaml
        sed -i 's|\$your_username:\$access_token|'$DOCKER_CREDS'|g' .do/app.yaml
    
    - name: Verify Docker image exists
      run: |
        echo "Verifying Docker image exists on Docker Hub..."
        docker pull ${{ secrets.DOCKER_IMAGE_NAME }}:latest
        echo "‚úÖ Image verified and accessible"
    
    - name: Deploy to DigitalOcean App Platform
      run: |
        echo "Deploying with image: ${{ secrets.DOCKER_IMAGE_NAME }}:latest"
        cat .do/app.yaml | grep -A 10 "image:"
        
        APP_ID=$(doctl apps list --format ID,Spec.Name --no-header | grep "${{ secrets.DO_APP_NAME }}" | cut -f1)
        
        if [ -z "$APP_ID" ]; then
          echo "Creating new app: ${{ secrets.DO_APP_NAME }}"
          doctl apps create --spec .do/app.yaml
        else
          echo "Updating existing app: ${{ secrets.DO_APP_NAME }} (ID: $APP_ID)"
          doctl apps update $APP_ID --spec .do/app.yaml
        fi
    
    - name: Wait for deployment
      run: |
        echo "Waiting for deployment of ${{ secrets.DO_APP_NAME }} to complete..."
        APP_ID=$(doctl apps list --format ID,Spec.Name --no-header | grep "${{ secrets.DO_APP_NAME }}" | cut -f1)
        
        for i in {1..30}; do
          STATUS=$(doctl apps get $APP_ID --format Phase --no-header)
          echo "Deployment status: $STATUS"
          
          if [ "$STATUS" = "ACTIVE" ]; then
            echo "‚úÖ Deployment successful!"
            break
          elif [ "$STATUS" = "ERROR" ]; then
            echo "‚ùå Deployment failed!"
            exit 1
          fi
          
          sleep 20
        done
    
    - name: Get App URL
      run: |
        APP_ID=$(doctl apps list --format ID,Spec.Name --no-header | grep "${{ secrets.DO_APP_NAME }}" | cut -f1)
        APP_URL=$(doctl apps get $APP_ID --format LiveURL --no-header)
        echo "üöÄ Application deployed at: $APP_URL"
